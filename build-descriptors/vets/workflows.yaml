---
apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: vets-ci-
  name: vets-ci
spec:
  # Point to a template to use as the entrypoint for the whole pipeline.
  entrypoint: vets-ci-workflow
  # Claim some storage to pass around the build templates
  volumeClaimTemplates:
  - metadata:
      name: workdir
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi

  templates:
  # The entrypoint template
  - name: vets-ci-workflow
    steps:
    - - name: Clone
        template: git-clone
        arguments:
          parameters:
            - name: git-ref
              value: "10-final-push-for-this-ticket"
    - - name: Tests
        template: lint-and-test-steps
        arguments:
          parameters:
            - name: python-image
              value: "python:3.9-alpine3.17"
    - - name: Build
        template: buildkit-build
    - - name: Notify
        template: post-to-discord-ci-notifications-channel
        arguments:
          parameters:
            - name: message
              value: "Successful Build for fluffy-octo-telegram"

  # DAG to parallel up test steps
  - name: lint-and-test-steps
    inputs:
      parameters:
        - name: python-image
    dag:
      tasks:
      - name: create-venv
        template: create-venv
        arguments:
          parameters:
            - name: python-image
              value: "{{inputs.parameters.python-image}}"
      - name: pycodestyle
        template: pycodestyle
        dependencies: [create-venv]
        arguments:
          parameters:
            - name: python-image
              value: "{{inputs.parameters.python-image}}"
      - name: django-tests
        template: djangotests
        dependencies: [create-venv]
        arguments:
          parameters:
            - name: python-image
              value: "{{inputs.parameters.python-image}}"
      - name: helm-templates
        template: helmtemplates
        arguments:
          parameters:
            - name: python-image
              value: "{{inputs.parameters.python-image}}"
      - name: terraform-fmt
        template: terraform-fmt

  # template to clone the repo and leave it in a folder for other containers.
  - name: git-clone
    inputs:
      parameters:
        - name: git-ref
      artifacts:
      - name: fluffy-octo-telegram-source
        path: /workdir/src
        git:
          repo: https://github.com/w3s7y/fluffy-octo-telegram.git
          revision: "{{inputs.parameters.git-ref}}"
    container:
      image: alpine/git:2.36.3
      command: [sh, -c]
      workingDir: /workdir/src
      args:
      - >
        git log -1
      volumeMounts:
      - name: workdir
        mountPath: /workdir

  # Create a blank venv in the workdir for the other containers
  - name: create-venv
    inputs:
      parameters:
        - name: python-image
    container:
      image: "{{inputs.parameters.python-image}}"
      command: [sh, -c]
      workingDir: /workdir
      args:
      - >
        pip install virtualenv &&
        virtualenv venv &&
        . ./venv/bin/activate &&
        pip install -r src/application/requirements.txt
      volumeMounts:
      - name: workdir
        mountPath: /workdir

  - name: pycodestyle
    inputs:
      parameters:
        - name: python-image
    container:
      image: "{{inputs.parameters.python-image}}"
      command: [sh, -c]
      workingDir: /workdir
      args:
      - >
        . ./venv/bin/activate &&
        pip install pycodestyle &&
        echo "Running pycodestyle:" &&
        pycodestyle -v --max-line-length=120
        --exclude=src/application/vets/migrations
        src/application
      volumeMounts:
      - name: workdir
        mountPath: /workdir

  - name: djangotests
    inputs:
      parameters:
        - name: python-image
    container:
      image: "{{inputs.parameters.python-image}}"
      workingDir: /workdir/src/application
      command: [sh, -c]
      env:
      - name: "DJANGO_CACHE"
        value: "local"
      - name: "DJANGO_DATABASE"
        value: "local"
      - name: "DJANGO_DEBUG"
        value: "True"
      - name: "DJANGO_SECRET_KEY"
        value: "ThisIsForTestingThePipeline9347651726841234576894123576894128976"
      args:
      - >
        . ../../venv/bin/activate &&
        python manage.py makemigrations &&
        python manage.py migrate &&
        python manage.py test --timing -v 2
      volumeMounts:
      - name: workdir
        mountPath: /workdir

  - name: helmtemplates
    inputs:
      parameters:
        - name: python-image
    container:
      image: "{{inputs.parameters.python-image}}"
      volumeMounts:
      - name: workdir
        mountPath: /workdir
      workingDir: /workdir/src
      command: [ "sh", "-c"]
      args:
      - >
        apk add helm &&
        for chart in $(find . -name chart -type d);
        do
        for values_file in $(find ${chart} -name values-*.yaml -type f);
        do
        echo "*************************************************************************************************";
        echo "Running helm template for chart: ${chart}  Using values file: ${values_file}";
        echo "*************************************************************************************************";
        helm template test ${chart} --values ${values_file} --debug;
        done;
        done;

  - name: buildkit-build
    steps:
      - - name: buildkit-image
          templateRef:
            name: buildkit
            template: build
          arguments:
            parameters:
              - name: image
                value: "theshipyard/vets-app"
              - name: push
                value: "true"

  - name: terraform-fmt
    container:
      image: hashicorp/terraform:1.4.4
      volumeMounts:
      - name: workdir
        mountPath: /workdir
      workingDir: /workdir
      command: ["sh", "-c"]
      args:
        - "terraform fmt -check -recursive -diff"

  - name: post-to-discord-ci-notifications-channel
    inputs:
      parameters:
        - name: message
    container:
      image: appropriate/curl:latest
      command: [sh, -c]
      env:
        - name: DISCORD_WEBHOOK
          valueFrom:
            secretKeyRef:
              name: discord-webhook
              key: url
      args: [
        "curl --location --request POST \
        --url ${DISCORD_WEBHOOK} \
        --header 'Content-Type: application/json' \
        --data-raw '{ \"username\": \"argo_workflow_bot\", \"content\": \"{{inputs.parameters.message}}\" }'",
      ]
