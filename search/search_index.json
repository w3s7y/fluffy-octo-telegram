{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Vets","text":"<p>Welcome to the documentation for <code>fluffy-octo-telegram</code> (or the \"Vets\" application).</p> <p>For what it is, head over to the Architecture section which details what the  application \"looks like\" and its core functionality.  It is also where the design wireframes, mockups etc. are.</p>"},{"location":"#running-the-project","title":"Running the project","text":"<p>There are a couple of ways to run the project, the suitability of each is dependent on individuals current dev setups  etc. </p>"},{"location":"#method-1-quick-and-dirty-using-python-and-poetry","title":"Method 1: Quick and dirty - using python and poetry","text":"<p>If you already have python and poetry installed you can just clone the repo, migrate the database and start the  application:</p> <pre><code># Set some env vars for running app locally.\nexport DJANGO_CACHE=local\nexport DJANGO_SECRET_KEY=some_long_random_string_0123456789\nexport DJANGO_DATABASE=local\nexport DJANGO_DEBUG=True\n\n# Clone repo and cd into dir. \ngit clone https://github.com/w3s7y/fluffy-octo-telegram.git\ncd fluffy-octo-telegram\n\n# Install python dependencies, migrate db and run local server (http://localhost:8000/vets/admin). \npoetry install\npoetry run vets-app-manage migrate\npoetry run vets-app-manage createsuperuser\npoetry run vets-app-manage runserver\n</code></pre>"},{"location":"#method-2-complete-development-setup","title":"Method 2: Complete development setup","text":"<p>If you don't already have a development environment for python you will probably want to setup a new one with all the bells and whistles, head over to the Development section to get setup. </p>"},{"location":"#the-kanban-board","title":"The kanban board","text":"<p>The project in-flight status, milestones etc. are all over on github projects:  here</p>"},{"location":"#links","title":"Links","text":"<p>note: only work if you have setup the local k8s environment</p> <ul> <li>vets dev environment</li> <li>vets production environment</li> <li>argocd</li> <li>argo-workflows</li> <li>vault</li> <li>grafana</li> <li>ldap server console</li> <li>ldap server password reset tool</li> </ul>"},{"location":"#links-to-documentation","title":"Links to documentation","text":"<ul> <li>Django core documentation</li> <li>Django rest_framework</li> <li>minikube</li> <li>helm</li> <li>argo CD</li> <li>argo workflows</li> <li>argo workflow examples</li> <li>argo events</li> <li>argo event examples</li> </ul>"},{"location":"architecture/","title":"Architecture","text":"<p>The application is designed to be deployed as management software to a chain of imaginary veterinary surgeries.</p>"},{"location":"architecture/#initial-design-phase-code-playground","title":"Initial design phase (code playground)","text":""},{"location":"architecture/#moving-forward","title":"Moving forward","text":""},{"location":"architecture/application/","title":"Vets application architecture","text":""},{"location":"architecture/application/#_1","title":"Vets application architecture","text":""},{"location":"architecture/ci/","title":"CI","text":""},{"location":"development/","title":"Development","text":"<p>The following intends to act as a quick reference handbook for developing vets. </p>"},{"location":"development/#creating-a-development-environment","title":"Creating a development environment","text":"<p>You will find the inital setup for a complete dev environment over on the Setup page.</p>"},{"location":"development/#project-layout","title":"Project layout","text":"<pre><code>pyproject.toml              # Project poetry configuration file.\nmkdocs.yml                  # Documentation generator configuration file.\n.github/                    # CI Pipeline definitions\ndocs/                       # Documentation root\nsrc/                        # Source files for vets application\n    manage.py               # Main management script for django (shortcut `poetry run vets-app-manage`)\n    vets/                   # Vets  (django application)\n        models.py           # Database model (table) definitions\n        testing/            # Test modules\n        views/              # Custom (vets) views\n    djangorestapi/          # Django project module (top-level django project directory)\nterraform/                  # Terraform modules to build k8s cluster and bootstrap in aws\nbuild-descriptors/          # UNUSED: Old CI pipelines from argo-workflows (use github actions now)\ndeploy-descriptors/         # Helm charts\n    cluster/                # Chart for deploying cluster services via argocd.\n    vets/\n        chart/              # Chart for deploying vets application (vanilla helm/k8s)\n        argocd.yaml         # CRDs for deploying dev and production envs via argocd.\n</code></pre>"},{"location":"development/#environment-variables","title":"Environment Variables","text":"<p>Reference table of all environment variables the app reads, mostly on boot to populate / select values from settings files.</p> Name Default Description DJANGO_CACHE local cache selection ('local' or 'redis') DJANGO_SECRET_KEY None secret key for encrypted strings in db DJANGO_DATABASE local database selection ('local' or 'main') local starts in-mem db for testing.  'main' reads env vars defined below to connect to postgres database. DJANGO_DEBUG False Turn on debugging POSTGRES_NAME vets database name to connect to POSTGRES_USER vets-app username to use to connect to db POSTGRES_PASSWORD None database password POSTGRES_HOST vets-database hostname to connect to POSTGRES_PORT 5432 Postgres port number REDIS_MASTER redis-master.redis.svc.cluster.local Master redis instance REDIS_REPLICAS redis-replicas.redis.svc.cluster.local Redis replicas l/b address REDIS_PORT 6379 Redis port number"},{"location":"development/setup/","title":"Setting up a local development environment","text":"<p>This page documents the high level steps and a few gotchas / config steps out of the default that will get you up and  running developing features.  It will detail the basic setup, including what the toolchain looks like and has looked  like through the project history.  </p>"},{"location":"development/setup/#software","title":"Software","text":"<p>In order to minimise the number of separate downloads and setup required to get kubernetes and the rest of the stack running locally, I opted to use rancher desktop as my container runtime and kubernetes solution for local development. It has packages for all common operating systems and is easy to configure for what we need it for.  Most of the other software is optional and only needs to be downloaded if you want/need to use it.</p> <p>This list assumes you already have basic tools like git etc. installed!</p> Name / Link Notes Python 3 Currently project uses <code>3.11</code>, ensure pip is installed too! Rancher Desktop The main development / local run platform (k3s) Helm For deploying things to k8s directly from your machine. Terrform For building / bootstrapping resources (k8s cluster) in aws Sqlite3 For looking in the local database file after tests etc."},{"location":"development/setup/#cloning-the-repo","title":"Cloning the repo","text":"<p>If not already done, clone the repo now. The documentation will give paths and commands relative to the root of the repository.  So clone and <code>cd</code> into it.</p> <pre><code>git clone https://github.com/w3s7y/fluffy-octo-telegram.git\ncd fluffy-octo-telegram\n</code></pre>"},{"location":"development/setup/#setting-up-python","title":"Setting up python","text":"<pre><code>pip3 install poetry\npoetry install\n</code></pre>"},{"location":"development/setup/#setting-up-rancher","title":"Setting up rancher","text":"<p>After installing rancher you will want to open the Preferences and set the following:  * navigate to the <code>Container Engine</code> section and select <code>dockerd (moby)</code>. * navigate to the <code>Kubernetes</code> section and ensure k8s is <code>enabled</code>.</p> <p>You can then test if kubernetes and the rest of rancher at large is functioning by running: </p> <pre><code>kubectl get pods --all-namespaces\n</code></pre> <p>If you get a small table with a number of rows returned you are good to move on. </p>"},{"location":"development/setup/#host-aliases","title":"Host aliases","text":"<p>To use the Ingress rules we create, create some local hostfile entries.</p> <pre><code># Host entries for fluffy-octo-telegram testing\n127.0.0.1   dev.vets.internal production.vets.internal\n# ci/cd entries\n127.0.0.1   argocd.vets.internal workflows.vets.internal \n# Monitoring\n127.0.0.1   loki.vets.internal grafana.vets.internal alertmanager.vets.internal prometheus.vets.internal \n# user admin / secrets\n127.0.0.1   reset.vets.internal admin.vets.internal vault.vets.internal\n# pgadmin\n127.0.0.1   pgadmin.dev.vets.internal pgadmin.production.vets.internal\n</code></pre>"},{"location":"development/setup/#deploy-argocd","title":"Deploy argocd","text":"<pre><code># Create a namespace in k8s for argo\nkubectl create ns argocd\n# Install argocd \nkubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml\n</code></pre> <p>This will probably take a few minutes to pull the images down and do the init routines.  Check for when the server is running: <code>kubectl get pods -n argocd</code>.</p>"},{"location":"development/setup/#deploy-remaining-cluster-services","title":"Deploy remaining cluster services","text":"<pre><code>helm install cluster-services deploy-descriptors/cluster/chart --namespace argocd\n</code></pre>"},{"location":"development/setup/#creation-of-app-secrets","title":"Creation of app secrets","text":"<p>Manually for now</p> <pre><code>kubectl create ns dev-vets\nkubectl create secret generic vets-app -n dev-vets \\\n  --from-literal=DJANGO_SECRET_KEY='&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; A VERY LONG RANDOM STRING &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;' \\\n  --from-literal=POSTGRES_PASSWORD='&lt;&lt;&lt;&lt;&lt; A COMPLEX PASSWORD &gt;&gt;&gt;&gt;&gt;'\n</code></pre> <p>Repeat for namespace <code>production-vets</code> as well.</p> <p>This will be moved to a vault implementation of secrets soon.</p>"},{"location":"development/setup/#deploy-vets","title":"Deploy vets","text":"<pre><code>kubectl apply -n argocd -f deploy-descriptors/vets/argocd.yaml\n</code></pre>"},{"location":"development/setup/#validating-everything-is-working","title":"Validating everything is working","text":""},{"location":"development/setup/#testing-local-python-running","title":"Testing local python running","text":"<pre><code>poetry run vets-app-manage migrate\npoetry run vets-app-manage test --keepdb\npoetry run vets-app-manage runserver\n</code></pre>"},{"location":"development/setup/#testing-on-k8s","title":"Testing on k8s","text":"<pre><code>kubectl get pods -n dev-vets\n</code></pre>"},{"location":"operations/","title":"Operations","text":"<p>This section deals with the various ways of deploying the vets application to k8s as well as documentation about the  vets specific implementation of the cluster and backend services (logging &amp; monitoring, databases etc.)</p>"},{"location":"operations/#docs-to-write-in-this-section","title":"Docs to write in this section","text":"<ul> <li>Localhost setup </li> <li>Bootstrapping &amp; deploying the CD server to k8s (argocd)</li> <li>Using internal CD to deploy the other services to cluster</li> <li>Deploying vets application</li> <li>Sanity checking</li> </ul>"}]}